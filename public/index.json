[{"content":"The Ultimate Guide to Installing Chocolatey Package Manager for Windows What is Chocolatey? Chocolatey (choco) is a powerful package manager for Windows that automates software installation, upgrading, and uninstallation. Think of it as the Windows equivalent of apt-get for Linux or brew for macOS.\nPrerequisites Windows operating system Administrator privileges Internet connection Installation Steps Step 1: Open PowerShell as Administrator Right-click on the Start menu Select \u0026ldquo;Windows PowerShell (Admin)\u0026rdquo; or \u0026ldquo;Windows Terminal (Admin)\u0026rdquo; Confirm the UAC prompt if it appears Step 2: Check Execution Policy Get-ExecutionPolicy If the policy isn\u0026rsquo;t set to RemoteSigned or Unrestricted, run:\nSet-ExecutionPolicy Bypass -Scope Process -Force Step 3: Install Chocolatey Copy and paste this command:\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) Step 4: Verify Installation choco --version Essential Chocolatey Commands üì¶ Package Management Command Description Example Install choco install \u0026lt;package\u0026gt; choco install firefox -y Upgrade choco upgrade \u0026lt;package\u0026gt; choco upgrade all Uninstall choco uninstall \u0026lt;package\u0026gt; choco uninstall notepad++ List choco list --local-only Shows installed packages Search choco search \u0026lt;keyword\u0026gt; choco search vlc üîß Useful Parameters -y: Auto-confirm all prompts --version: Specify package version --force: Force package installation --verbose: Show detailed output Pro Tips üí° Install multiple packages at once: choco install firefox vlc 7zip -y Keep all packages updated: choco upgrade all -y Schedule automatic updates: choco install chocolatey-core.extension choco install choco-upgrade-all-at --params \u0026#34;\u0026#39;/DAILY:yes /TIME:03:00\u0026#39;\u0026#34; Popular Software to Install Development: vscode, git, nodejs Utilities: 7zip, notepadplusplus, everything Browsers: googlechrome, firefox Media: vlc, spotify Troubleshooting If you encounter any issues:\nRun PowerShell as Administrator Check your internet connection Verify Windows Defender isn\u0026rsquo;t blocking the installation Clear the Chocolatey cache: choco cache remove all Need Help? Official Documentation: chocolatey.org/docs Community Forum: chocolatey.org/community Package Repository: community.chocolatey.org Happy installing! With Chocolatey, managing Windows software has never been easier. üöÄ\n","permalink":"http://localhost:1313/posts/ultimate-guide-to-chocolatey/","summary":"\u003ch1 id=\"the-ultimate-guide-to-installing-chocolatey-package-manager-for-windows\"\u003eThe Ultimate Guide to Installing Chocolatey Package Manager for Windows\u003c/h1\u003e\n\u003ch2 id=\"what-is-chocolatey\"\u003eWhat is Chocolatey?\u003c/h2\u003e\n\u003cp\u003eChocolatey (choco) is a powerful package manager for Windows that automates software installation, upgrading, and uninstallation. Think of it as the Windows equivalent of \u003ccode\u003eapt-get\u003c/code\u003e for Linux or \u003ccode\u003ebrew\u003c/code\u003e for macOS.\u003c/p\u003e\n\u003ch2 id=\"prerequisites\"\u003ePrerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWindows operating system\u003c/li\u003e\n\u003cli\u003eAdministrator privileges\u003c/li\u003e\n\u003cli\u003eInternet connection\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"installation-steps\"\u003eInstallation Steps\u003c/h2\u003e\n\u003ch3 id=\"step-1-open-powershell-as-administrator\"\u003eStep 1: Open PowerShell as Administrator\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eRight-click on the Start menu\u003c/li\u003e\n\u003cli\u003eSelect \u0026ldquo;Windows PowerShell (Admin)\u0026rdquo; or \u0026ldquo;Windows Terminal (Admin)\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eConfirm the UAC prompt if it appears\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"step-2-check-execution-policy\"\u003eStep 2: Check Execution Policy\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGet-ExecutionPolicy\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf the policy isn\u0026rsquo;t set to \u003ccode\u003eRemoteSigned\u003c/code\u003e or \u003ccode\u003eUnrestricted\u003c/code\u003e, run:\u003c/p\u003e","title":"Ultimate Guide to Chocolatey"},{"content":"Looking for efficient ways to sort data in Go? This guide covers everything from basic sorting to advanced techniques!\nüöÄ Basic Sorting The sort package provides fundamental sorting capabilities.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sort\u0026#34; ) func main() { //sort int s1 := []int{8, 2, 6, 3, 1, 4} sort.Ints(s1) fmt.Println(s1) //sort int reverse sort.Sort(sort.Reverse(sort.IntSlice(s1))) fmt.Println(s1) //sort string s2 := []string{\u0026#34;aaa\u0026#34;, \u0026#34;bbb\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;4\u0026#34;} sort.Strings(s2) fmt.Println(s2) //sort string reverse sort.Sort(sort.Reverse(sort.StringSlice(s2))) fmt.Println(s2) //sort float64 s3 := []float64{1, 1.2, 0, -1.9, -82.333, 99.11} sort.Float64s(s3) fmt.Println(s3) //sort float64 reverse sort.Sort(sort.Reverse(sort.Float64Slice(s3))) fmt.Println(s3) } üéØ Object Sorting How to sort a list of objects by specific fields:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sort\u0026#34; ) type Data struct { ID int Name string } func main() { //sort struct ds := []Data{} ds = append(ds, Data{ID: 49, Name: \u0026#34;kevin\u0026#34;}) ds = append(ds, Data{ID: 11, Name: \u0026#34;peter\u0026#34;}) ds = append(ds, Data{ID: 11, Name: \u0026#34;mary\u0026#34;}) ds = append(ds, Data{ID: 11, Name: \u0026#34;adon\u0026#34;}) ds = append(ds, Data{ID: 15, Name: \u0026#34;lily\u0026#34;}) //sort by id sort.Slice(ds, func(i, j int) bool { return ds[i].ID \u0026lt; ds[j].ID }) fmt.Println(ds) //sort by Name sort.Slice(ds, func(i, j int) bool { return ds[i].Name \u0026lt; ds[j].Name }) fmt.Println(ds) //sort by id reverse sort.Slice(ds, func(i, j int) bool { return ds[i].ID \u0026gt; ds[j].ID }) fmt.Println(ds) } üé® Multi-Level Sorting Need secondary sorting when primary fields are equal? Here\u0026rsquo;s how:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sort\u0026#34; ) type Data struct { ID int Name string } func main() { ds := []Data{} ds = append(ds, Data{ID: 49, Name: \u0026#34;kevin\u0026#34;}) ds = append(ds, Data{ID: 13, Name: \u0026#34;kevin\u0026#34;}) ds = append(ds, Data{ID: 12, Name: \u0026#34;kevin\u0026#34;}) ds = append(ds, Data{ID: 11, Name: \u0026#34;peter\u0026#34;}) ds = append(ds, Data{ID: 15, Name: \u0026#34;lily\u0026#34;}) //sort by Name, then by ID sort.Slice(ds, func(i, j int) bool { if ds[i].Name == ds[j].Name { return ds[i].ID \u0026lt; ds[j].ID } return ds[i].Name \u0026lt; ds[j].Name }) fmt.Println(ds) } ‚≠ê Natural Sorting Ever faced issues sorting strings with numbers? For example:\nInput: [\u0026ldquo;A11\u0026rdquo;, \u0026ldquo;A3\u0026rdquo;, \u0026ldquo;A2\u0026rdquo;, \u0026ldquo;A1\u0026rdquo;] Standard sort result: [\u0026ldquo;A1\u0026rdquo;, \u0026ldquo;A11\u0026rdquo;, \u0026ldquo;A2\u0026rdquo;, \u0026ldquo;A3\u0026rdquo;] Desired result: [\u0026ldquo;A1\u0026rdquo;, \u0026ldquo;A2\u0026rdquo;, \u0026ldquo;A3\u0026rdquo;, \u0026ldquo;A11\u0026rdquo;] Natural sorting solves this problem perfectly! It\u0026rsquo;s especially useful for:\nVersion numbers, IP addresses, File names with numbers,\nInstallation First, install the required package:\ngo get github.com/facette/natsort Here\u0026rsquo;s how to use natural sorting:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sort\u0026#34; \u0026#34;github.com/facette/natsort\u0026#34; ) type Data struct { ID string Name string } func main() { // Standard string sort comparison s2 := []string{\u0026#34;Device2\u0026#34;, \u0026#34;Device11\u0026#34;, \u0026#34;Device1\u0026#34;, \u0026#34;Device22\u0026#34;, \u0026#34;Device13\u0026#34;, \u0026#34;Device3\u0026#34;} sort.Strings(s2) fmt.Println(\u0026#34;Standard sort:\u0026#34;, s2) // Natural sort s2 = []string{\u0026#34;Device2\u0026#34;, \u0026#34;Device11\u0026#34;, \u0026#34;Device1\u0026#34;, \u0026#34;Device22\u0026#34;, \u0026#34;Device13\u0026#34;, \u0026#34;Device3\u0026#34;} natsort.Sort(s2) fmt.Println(\u0026#34;Natural sort:\u0026#34;, s2) // Natural sort with structs ds := []Data{} ds = append(ds, Data{ID: \u0026#34;2\u0026#34;, Name: \u0026#34;kevin\u0026#34;}) ds = append(ds, Data{ID: \u0026#34;11\u0026#34;, Name: \u0026#34;peter\u0026#34;}) ds = append(ds, Data{ID: \u0026#34;1\u0026#34;, Name: \u0026#34;mary\u0026#34;}) ds = append(ds, Data{ID: \u0026#34;3\u0026#34;, Name: \u0026#34;adon\u0026#34;}) ds = append(ds, Data{ID: \u0026#34;12\u0026#34;, Name: \u0026#34;lily\u0026#34;}) //sort by id sort.Slice(ds, func(i, j int) bool { return natsort.Compare(ds[i].ID, ds[j].ID) }) fmt.Println(ds) } ","permalink":"http://localhost:1313/posts/golang-sort/","summary":"\u003cp\u003eLooking for efficient ways to sort data in Go? This guide covers everything from basic sorting to advanced techniques!\u003c/p\u003e\n\u003ch2 id=\"-basic-sorting\"\u003eüöÄ Basic Sorting\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003esort\u003c/code\u003e package provides fundamental sorting capabilities.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-golang\" data-lang=\"golang\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sort\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//sort int\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInts\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//sort int reverse\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSort\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReverse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eIntSlice\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//sort string\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;aaa\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bbb\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;6\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;4\u0026#34;\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStrings\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//sort string reverse\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSort\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReverse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStringSlice\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//sort float64\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003es3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e []\u003cspan style=\"color:#66d9ef\"\u003efloat64\u003c/span\u003e{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1.2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1.9\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e82.333\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e99.11\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFloat64s\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e//sort float64 reverse\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSort\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReverse\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFloat64Slice\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es3\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"-object-sorting\"\u003eüéØ Object Sorting\u003c/h2\u003e\n\u003cp\u003eHow to sort a list of objects by specific fields:\u003c/p\u003e","title":"Golang-sort"},{"content":"Looking for an easy-to-use TCP/UDP testing tool? Sokit is a lightweight but powerful solution that helps you test network communications with ease.\n‚ú® Key Features TCP/UDP Server simulation (supports both string and hex formats) TCP/UDP Client simulation (supports both string and hex formats) Data forwarding/proxy capabilities Cross-platform support (Windows \u0026amp; Linux) Clean and intuitive UI üîó Quick Links GitHub Repository Download Link üìñ Quick Start Guide Basic Server-Client Communication Launch two instances of Sokit - one as TCP Server (left) and one as TCP Client (right) Configure IP addresses and ports for both instances Establish the connection between them Testing Basic Communication: Send \u0026ldquo;123\u0026rdquo; from Client to Server Server receives the string Server can select specific client from the Connection list Send \u0026ldquo;999\u0026rdquo; back to Client from Server üî¢ Hex Communication Mode Client can send hex data like [33 32 31] to Server\nNote: Hex data must be enclosed in square brackets [ ]\nServer can expand received data to show hex representation\nüîÑ Data Forwarding Setup Launch a third Sokit instance as forwarding server with:\nSource: 127.0.0.1:54321 Destination: 127.0.0.1:12345 When client connects to the forwarding server\u0026rsquo;s source address, traffic will be automatically forwarded to the destination server\nüí° Pro Tips Use hex mode for binary protocol testing Forwarding feature is great for debugging proxy scenarios Save common configurations for quick reuse Monitor traffic in real-time with the built-in logger üõ† Perfect For Network protocol testing IoT device communication debugging API endpoint verification Network proxy testing Educational purposes Give Sokit a try - it might become your go-to networking tool! Feel free to star the project on GitHub if you find it useful.\n","permalink":"http://localhost:1313/posts/sokit/","summary":"\u003cp\u003eLooking for an easy-to-use TCP/UDP testing tool? Sokit is a lightweight but powerful solution that helps you test network communications with ease.\u003c/p\u003e\n\u003ch2 id=\"-key-features\"\u003e‚ú® Key Features\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eTCP/UDP Server simulation (supports both string and hex formats)\u003c/li\u003e\n\u003cli\u003eTCP/UDP Client simulation (supports both string and hex formats)\u003c/li\u003e\n\u003cli\u003eData forwarding/proxy capabilities\u003c/li\u003e\n\u003cli\u003eCross-platform support (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003cli\u003eClean and intuitive UI\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-quick-links\"\u003eüîó Quick Links\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/sinpolib/sokit\"\u003eGitHub Repository\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mega.nz/file/1l9AzS4Q#Q-D9Slf4O52bOtmkjYawedvQR4GxyfRi0hj7svkUHR4\"\u003eDownload Link\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"-quick-start-guide\"\u003eüìñ Quick Start Guide\u003c/h2\u003e\n\u003ch3 id=\"basic-server-client-communication\"\u003eBasic Server-Client Communication\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eLaunch two instances of Sokit - one as TCP Server (left) and one as TCP Client (right)\u003c/li\u003e\n\u003cli\u003eConfigure IP addresses and ports for both instances\u003c/li\u003e\n\u003cli\u003eEstablish the connection between them\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg alt=\"Server-Client Setup\" loading=\"lazy\" src=\"/posts/sokit/1.png\"\u003e\u003c/p\u003e","title":"Sokit - A Powerful TCP/UDP Testing Tool You Should Know"},{"content":"üéØ Ninja Ways to Hide Console Window in Go Ever wanted to make your Go applications look more professional by hiding that pesky console window? You\u0026rsquo;re in the right place! Let\u0026rsquo;s explore some ninja techniques to achieve this. ü•∑\nüöÄ Method 1: The Quick Strike (-ldflags) The simplest way to hide the console window is using build flags. Think of it as a stealth mode for your app!\ngo build -ldflags -H=windowsgui main.go Pros:\nSuper simple to implement No code changes needed Works for most basic applications Cons:\nLimited flexibility Can\u0026rsquo;t toggle console visibility at runtime\nüé≠ Method 2: The Shape-Shifter (syscall) Want more control? Let\u0026rsquo;s use Windows API calls to dynamically hide/show the console!\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;syscall\u0026#34; ) func main() { hideConsole() // Your awesome code here! } func hideConsole() { console := syscall.MustLoadDLL(\u0026#34;kernel32\u0026#34;).MustFindProc(\u0026#34;GetConsoleWindow\u0026#34;) if console != nil { showWindow := syscall.MustLoadDLL(\u0026#34;user32.dll\u0026#34;).MustFindProc(\u0026#34;ShowWindow\u0026#34;) hwnd, _, _ := console.Call() if hwnd != 0 { showWindow.Call(hwnd, 0) // 0 = SW_HIDE } } } // Want to show it again? Just use this! func showConsole() { console := syscall.MustLoadDLL(\u0026#34;kernel32\u0026#34;).MustFindProc(\u0026#34;GetConsoleWindow\u0026#34;) if console != nil { showWindow := syscall.MustLoadDLL(\u0026#34;user32.dll\u0026#34;).MustFindProc(\u0026#34;ShowWindow\u0026#34;) hwnd, _, _ := console.Call() if hwnd != 0 { showWindow.Call(hwnd, 5) // 5 = SW_SHOW } } } üé® Method 3: The Artist\u0026rsquo;s Way (manifest.xml + syso) This is the professional approach! Create a manifest file for your application:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;assembly xmlns=\u0026#34;urn:schemas-microsoft-com:asm.v1\u0026#34; manifestVersion=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;assemblyIdentity version=\u0026#34;1.0.0.0\u0026#34; processorArchitecture=\u0026#34;*\u0026#34; name=\u0026#34;YourCoolApp\u0026#34; type=\u0026#34;win32\u0026#34;/\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;dependentAssembly\u0026gt; \u0026lt;assemblyIdentity type=\u0026#34;win32\u0026#34; name=\u0026#34;Microsoft.Windows.Common-Controls\u0026#34; version=\u0026#34;6.0.0.0\u0026#34; processorArchitecture=\u0026#34;*\u0026#34; publicKeyToken=\u0026#34;6595b64144ccf1df\u0026#34; language=\u0026#34;*\u0026#34;/\u0026gt; \u0026lt;/dependentAssembly\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/assembly\u0026gt; Then follow these magical steps:\n# Install the wizard\u0026#39;s tool go install github.com/akavel/rsrc@latest # Create the magic potion (syso file) rsrc -manifest manifest.xml -o app.syso # Build your masterpiece go build üßô‚Äç‚ôÇÔ∏è Pro Tips and Tricks Logging Magic When your console is hidden, don\u0026rsquo;t forget to implement proper logging:\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; ) func main() { // Create your spell book (log file) logFile, _ := os.OpenFile(\u0026#34;app.log\u0026#34;, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666) defer logFile.Close() // Direct your magical energies (logs) to the spell book log.SetOutput(logFile) // Cast your spells (write logs) log.Println(\u0026#34;‚ú® Application started!\u0026#34;) } Debug Mode Toggle Add this cool feature to show/hide console based on command line flags:\npackage main import \u0026#34;flag\u0026#34; func main() { debug := flag.Bool(\u0026#34;debug\u0026#34;, false, \u0026#34;show console window\u0026#34;) flag.Parse() if !*debug { hideConsole() } // Rest of your awesome code } üéÆ Best Practices Always provide error logging mechanisms Consider adding a debug mode Test thoroughly on different Windows versions Keep a development build with console visible Handle panics gracefully\nüåü When to Use What? Quick Project: Go with Method 1 (-ldflags) Need Runtime Control: Choose Method 2 (syscall) Professional App: Use Method 3 (manifest)\nüéâ Conclusion Now you\u0026rsquo;re equipped with all the ninja techniques to hide that console window like a pro! Remember, with great power comes great responsibility - make sure to implement proper logging and error handling in your invisible applications!\nüìö Further Reading Windows API Documentation\nGo Windows Examples\nrsrc Tool Documentation\n","permalink":"http://localhost:1313/posts/how-to-hide-the-console-window-when-running-a-golang-compiled-file./","summary":"\u003ch2 id=\"-ninja-ways-to-hide-console-window-in-go\"\u003eüéØ Ninja Ways to Hide Console Window in Go\u003c/h2\u003e\n\u003cp\u003eEver wanted to make your Go applications look more professional by hiding that pesky console window? You\u0026rsquo;re in the right place! Let\u0026rsquo;s explore some ninja techniques to achieve this. ü•∑\u003c/p\u003e\n\u003ch2 id=\"-method-1-the-quick-strike--ldflags\"\u003eüöÄ Method 1: The Quick Strike (-ldflags)\u003c/h2\u003e\n\u003cp\u003eThe simplest way to hide the console window is using build flags. Think of it as a stealth mode for your app!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego build -ldflags -H\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ewindowsgui main.go\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePros:\u003c/p\u003e","title":"How to hide the Console window when running a Golang compiled file"}]